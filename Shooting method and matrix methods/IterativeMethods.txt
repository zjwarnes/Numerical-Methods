%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%  ITERATIVE METHODS COMPARISON  %%%%%%%
function [k] = linearSystems()

A = [ 3 , -1 , 0 ; -1 , 3 , -1 ; 0 , -1 , 3 ];
b = [ 2 , 2 , -1 ]';
x0 = [ 1 , 0 , 0 ]';

omega = 0.2;
theta = 1.1;

tol = 10^-10;
N = 100;

[x,kJacobi] = jacobi(A,b,x0,tol,N);
[x,kGaussSeidel] = gaussSeidel(A,b,x0,tol,N);
[x,kRichardson] = richardson(A,b,x0,omega,tol,N);
[x,kSOR] = SOR(A,b,x0,theta,tol,N);

k = [kRichardson, kJacobi, kGaussSeidel, kSOR]';


end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%  RICHARDSON  %%%%%%%%%%%%%%%%%%%%%
function [x,k] = richardson(A,b,x0,omega,tol, N)
% x contains the solution
% k iterations to answer within tolerance 
% A is the matrix,
% b is a vertor
% N is the number of iterations 

w = omega;
x = zeros(length(b),N);
x(:,1) = x0;

k=1;
while k==1 || norm(x(:,k) - x(:,k-1)) > tol
    x(:,k+1) = w*(b-A*x(:,k)) + x(:,k);
    k=k+1;    
end
k=k-1;
end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%  JACOBI  %%%%%%%%%%%%%%%%%%
function [x,k] = jacobi(A, b, x0, tol, N)
% x contains the solution
% k iterations to answer within tolerance 
% A is the matrix,
% b is a vertor
% N is the number of iterations 

x = zeros(length(b),N);
x(:,1) = x0;

k=1;
while k==1 || norm(x(:,k) - x(:,k-1)) > tol
    for i = 1:length(A)
       x(i,k+1) = (1/A(i,i)) * (b(i) - (A(i,:)*x(:,k) - A(i,i).*x(i,k)));
    end
    k=k+1;    
end
k=k-1;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%  GAUSSSEIDEL  %%%%%%%%%%%%%
function [x,k] = gaussSeidel(A,b,x0,tol,N)
% x contains the solution
% k iterations to answer within tolerance 
% A is the matrix,
% b is a vertor
% N is the number of iterations 

x = zeros(length(b),N);
x(:,1) = x0;

k=1;
while k==1 || norm(x(:,k) -x(:,k-1)) > tol
    for i = 1:length(A)
        upper = 0;
        lower = 0;
        if(i+1 <= length(A))
            upper = (A(i,i+1:end)*x(i+1:end,k));
        end
        if(i-1 > 0)
            lower = (A(i,1:i-1)*x(1:i-1,k+1));
        end       
        x(i,k+1) = (1/A(i,i)) * (b(i) - upper - lower);   
    end
    k=k+1;    
end
k=k-1;
end







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%  SOR  %%%%%%%%%%%%%%%%%%%%%

function [x,k] = SOR(A,b,x0,theta,tol,N)

% x contains the solution
% k iterations to answer within tolerance 

% A is the matrix,
% b is a vertor
% N is the number of iterations 

T = theta;
x = zeros(length(b),N);
x(:,1) = x0;

k=1;
while k==1 || norm(x(:,k) - x(:,k-1)) > tol
    for i = 1:length(A)
        upper = 0;
        lower = 0;
        if(i+1 <= length(A))
            upper = (A(i,i+1:end)*x(i+1:end,k));
        end
        if(i-1 > 0)
            lower = (A(i,1:i-1)*x(1:i-1,k+1));
        end
       
        x(i,k+1) = (1-T)*x(i,k) + (T/A(i,i)) * (b(i) - upper - lower);   
    end
    k=k+1;    
end
end













